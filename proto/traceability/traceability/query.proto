syntax = "proto3";
package traceability.traceability;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "traceability/traceability/params.proto";
import "traceability/traceability/phtraceinfo.proto";
// this line is used by starport scaffolding # 1
import "traceability/traceability/traceinfo.proto";

option go_package = "traceability/x/traceability/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/traceability/traceability/params";
  }
  // Queries a Traceinfo by id.
	rpc Traceinfo(QueryGetTraceinfoRequest) returns (QueryGetTraceinfoResponse) {
		option (google.api.http).get = "/traceability/traceability/traceinfo/{id}";
	}

	// Queries a list of Traceinfo items.
	rpc TraceinfoAll(QueryAllTraceinfoRequest) returns (QueryAllTraceinfoResponse) {
		option (google.api.http).get = "/traceability/traceability/traceinfo";
	}

// Queries a Phtraceinfo by id.
	rpc Phtraceinfo(QueryGetPhtraceinfoRequest) returns (QueryGetPhtraceinfoResponse) {
		option (google.api.http).get = "/traceability/traceability/phtraceinfo/{id}";
	}

	// Queries a list of Phtraceinfo items.
	rpc PhtraceinfoAll(QueryAllPhtraceinfoRequest) returns (QueryAllPhtraceinfoResponse) {
		option (google.api.http).get = "/traceability/traceability/phtraceinfo";
	}

// Queries a list of ShowTraceinfobydic items.
	rpc ShowTraceinfobydic(QueryShowTraceinfobydicRequest) returns (QueryShowTraceinfobydicResponse) {
		option (google.api.http).get = "/traceability/traceability/show_traceinfobydic/{dic}";
	}

// Queries a list of ShowPhtraceinfobydic items.
	rpc ShowPhtraceinfobydic(QueryShowPhtraceinfobydicRequest) returns (QueryShowPhtraceinfobydicResponse) {
		option (google.api.http).get = "/traceability/traceability/show_phtraceinfobydic/{dic}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetTraceinfoRequest {
	uint64 id = 1;
}

message QueryGetTraceinfoResponse {
	Traceinfo Traceinfo = 1 [(gogoproto.nullable) = false];
}

message QueryAllTraceinfoRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTraceinfoResponse {
	repeated Traceinfo Traceinfo = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPhtraceinfoRequest {
	uint64 id = 1;
}

message QueryGetPhtraceinfoResponse {
	Phtraceinfo Phtraceinfo = 1 [(gogoproto.nullable) = false];
}

message QueryAllPhtraceinfoRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPhtraceinfoResponse {
	repeated Phtraceinfo Phtraceinfo = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryShowTraceinfobydicRequest {
  string dic = 1;
}

message QueryShowTraceinfobydicResponse {
  Traceinfo traceinfo = 1 [(gogoproto.nullable) = false];
}

message QueryShowPhtraceinfobydicRequest {
  string dic = 1;
}

message QueryShowPhtraceinfobydicResponse {
	Phtraceinfo phtraceinfo = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
