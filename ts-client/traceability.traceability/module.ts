// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgSendForbidShip } from "./types/traceability/traceability/tx";
import { MsgCheckdrug } from "./types/traceability/traceability/tx";
import { MsgSendAddCustomer } from "./types/traceability/traceability/tx";
import { MsgSendSendDrug } from "./types/traceability/traceability/tx";
import { MsgSendAllowShip } from "./types/traceability/traceability/tx";
import { MsgSendRequestShip } from "./types/traceability/traceability/tx";
import { MsgSendAllowSell } from "./types/traceability/traceability/tx";
import { MsgSendSellDrug } from "./types/traceability/traceability/tx";
import { MsgSendDestroyDrug } from "./types/traceability/traceability/tx";


export { MsgSendForbidShip, MsgCheckdrug, MsgSendAddCustomer, MsgSendSendDrug, MsgSendAllowShip, MsgSendRequestShip, MsgSendAllowSell, MsgSendSellDrug, MsgSendDestroyDrug };

type sendMsgSendForbidShipParams = {
  value: MsgSendForbidShip,
  fee?: StdFee,
  memo?: string
};

type sendMsgCheckdrugParams = {
  value: MsgCheckdrug,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendAddCustomerParams = {
  value: MsgSendAddCustomer,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendSendDrugParams = {
  value: MsgSendSendDrug,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendAllowShipParams = {
  value: MsgSendAllowShip,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendRequestShipParams = {
  value: MsgSendRequestShip,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendAllowSellParams = {
  value: MsgSendAllowSell,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendSellDrugParams = {
  value: MsgSendSellDrug,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendDestroyDrugParams = {
  value: MsgSendDestroyDrug,
  fee?: StdFee,
  memo?: string
};


type msgSendForbidShipParams = {
  value: MsgSendForbidShip,
};

type msgCheckdrugParams = {
  value: MsgCheckdrug,
};

type msgSendAddCustomerParams = {
  value: MsgSendAddCustomer,
};

type msgSendSendDrugParams = {
  value: MsgSendSendDrug,
};

type msgSendAllowShipParams = {
  value: MsgSendAllowShip,
};

type msgSendRequestShipParams = {
  value: MsgSendRequestShip,
};

type msgSendAllowSellParams = {
  value: MsgSendAllowSell,
};

type msgSendSellDrugParams = {
  value: MsgSendSellDrug,
};

type msgSendDestroyDrugParams = {
  value: MsgSendDestroyDrug,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgSendForbidShip({ value, fee, memo }: sendMsgSendForbidShipParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendForbidShip: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendForbidShip({ value: MsgSendForbidShip.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendForbidShip: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCheckdrug({ value, fee, memo }: sendMsgCheckdrugParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCheckdrug: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCheckdrug({ value: MsgCheckdrug.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCheckdrug: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendAddCustomer({ value, fee, memo }: sendMsgSendAddCustomerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendAddCustomer: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendAddCustomer({ value: MsgSendAddCustomer.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendAddCustomer: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendSendDrug({ value, fee, memo }: sendMsgSendSendDrugParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendSendDrug: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendSendDrug({ value: MsgSendSendDrug.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendSendDrug: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendAllowShip({ value, fee, memo }: sendMsgSendAllowShipParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendAllowShip: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendAllowShip({ value: MsgSendAllowShip.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendAllowShip: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendRequestShip({ value, fee, memo }: sendMsgSendRequestShipParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendRequestShip: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendRequestShip({ value: MsgSendRequestShip.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendRequestShip: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendAllowSell({ value, fee, memo }: sendMsgSendAllowSellParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendAllowSell: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendAllowSell({ value: MsgSendAllowSell.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendAllowSell: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendSellDrug({ value, fee, memo }: sendMsgSendSellDrugParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendSellDrug: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendSellDrug({ value: MsgSendSellDrug.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendSellDrug: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendDestroyDrug({ value, fee, memo }: sendMsgSendDestroyDrugParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendDestroyDrug: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendDestroyDrug({ value: MsgSendDestroyDrug.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendDestroyDrug: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgSendForbidShip({ value }: msgSendForbidShipParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendForbidShip", value: MsgSendForbidShip.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendForbidShip: Could not create message: ' + e.message)
			}
		},
		
		msgCheckdrug({ value }: msgCheckdrugParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgCheckdrug", value: MsgCheckdrug.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCheckdrug: Could not create message: ' + e.message)
			}
		},
		
		msgSendAddCustomer({ value }: msgSendAddCustomerParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendAddCustomer", value: MsgSendAddCustomer.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendAddCustomer: Could not create message: ' + e.message)
			}
		},
		
		msgSendSendDrug({ value }: msgSendSendDrugParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendSendDrug", value: MsgSendSendDrug.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendSendDrug: Could not create message: ' + e.message)
			}
		},
		
		msgSendAllowShip({ value }: msgSendAllowShipParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendAllowShip", value: MsgSendAllowShip.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendAllowShip: Could not create message: ' + e.message)
			}
		},
		
		msgSendRequestShip({ value }: msgSendRequestShipParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendRequestShip", value: MsgSendRequestShip.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendRequestShip: Could not create message: ' + e.message)
			}
		},
		
		msgSendAllowSell({ value }: msgSendAllowSellParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendAllowSell", value: MsgSendAllowSell.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendAllowSell: Could not create message: ' + e.message)
			}
		},
		
		msgSendSellDrug({ value }: msgSendSellDrugParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendSellDrug", value: MsgSendSellDrug.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendSellDrug: Could not create message: ' + e.message)
			}
		},
		
		msgSendDestroyDrug({ value }: msgSendDestroyDrugParams): EncodeObject {
			try {
				return { typeUrl: "/traceability.traceability.MsgSendDestroyDrug", value: MsgSendDestroyDrug.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendDestroyDrug: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			TraceabilityTraceability: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;